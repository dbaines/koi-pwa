<%= content_for :title, "Creating new components" -%>

<div class="content-spacing">

  <p><em>Note: This has nothing to do with the <a href="http://www.w3.org/TR/components-intro/" target="_blank">official HTML component spec</a>.</em>

  <p>The concept of a <strong>component</strong> is something that consists of HTML, CSS and sometimes JS.</p>

  <h2 class="heading-two">Directory Structure</h2>

  <p>The component needs be named. For example, if we needed to create a component called "advanced button", we would name our files advanced-button. Our stylesheet and javascript files live in the components folder for each:</p>

  <ul>
    <li><code>/app/assets/stylesheets/components/advanced-button.css.scss</code></li>
    <li><code>/app/assets/javascripts/components/advanced-button.js</code></li>
  </ul>

  <p>Any associated third-party stylesheets or javascripts should be included in:</p>

  <ul>
    <li><code>/vendor/assets/stylesheets/</code></li>
    <li><code>/vendor/assets/javascripts/</code></li>
  </ul>

  <p>Any vendor files that are directly associated with a component should be included in the component files itself. For example, if advanced-button for some reason relied on colourbox, our components javascript file would include the <code>//= require colorbox</code> line at the top, rather than including in our global <code>application.js</code>. </p>

  <p>If there are vendor files that aren't associated with a component, they are included in our global <code>application.css.scss/application.js</code> files.</p>

  <h2 class="heading-two">CSS Coding Style</h2>

  <p>Our CSS coding style uses a varation of <a href='http://bem.info/method/' target='_blank'>BEM</a>, replacing the B (Block) with the component.</p>

  <p>Our BEM implementation is: <code>.component--child-element__varation</code></p>

  <p>Example of a component with children and varations:</p>

  <pre class="sg-pre prettyprint">.advanced-button { 
}
.advanced-button--image { 
}
.advanced-button__small {
}
.advanced-button__small--image {
}
.advanced-button--text {
}</pre>

  <h2 class="heading-two">Javascript Boilerplate</h2>

  <p>Below is a javascript template that will ensure your code is using strict mode as well as implementing jslint helpers.</p>

  <p>All code that would normally go between the jQuery anonymous function (<code>$(function(){})</code>) now goes inside the <code>ornament:refresh</code> function. This will ensure the code gets executed on page load and will also re-execute when the refresh is triggered. The refresh can be triggered for example, on an AJAX call. This will ensure whatever you're AJAXing in will update the DOM again with the correct bindings and changes.</p>

  <pre class="sg-pre prettyprint">/*jslint browser: true, indent: 2, todo: true, unparam: true */
/*global jQuery,Ornament */
(function (document, window, $) {
  "use strict";
  $(document).on("ornament:refresh", function () {

    // code here

  });
}(document, window, jQuery));</pre>

  <p>Once you've created your javascript file you can add it in to either <code>application.js</code> or <code>application_bottom.js</code></p>

  <p>The difference between the two files is that <code>application.js</code> is loaded in the website's <code>head</code> tag, the <code>application_bottom.js</code> file is loaded shortly before the end of the <code>body</code>. </p>

  <p>The easiest way to figure out which one to put it in is by asking yourself, "Is this code super important for page load?"<br />
  If the answer is yes, put it in the high-priority <code>application.js</code> file. If it's code that can be executed a few seconds after the page has loaded, put it in <code>application_bottom.js</code>.</p>

</div>